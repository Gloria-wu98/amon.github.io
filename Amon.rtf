{\rtf1\ansi\ansicpg950\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red71\green138\blue206;
\red141\green213\blue254;\red203\green203\blue202;\red109\green109\blue109;\red194\green125\blue100;\red109\green115\blue120;
\red184\green113\blue248;\red212\green212\blue212;\red112\green192\blue130;\red167\green197\blue151;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c34146\c61677\c84338;
\cssrgb\c61545\c86704\c99884;\cssrgb\c83320\c83320\c83112;\cssrgb\c50307\c50306\c50181;\cssrgb\c80772\c56796\c46790;\cssrgb\c50336\c52696\c54531;
\cssrgb\c77746\c54642\c98035;\cssrgb\c86465\c86464\c86248;\cssrgb\c50437\c78684\c58115;\cssrgb\c71035\c80830\c65726;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12720\viewh7240\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 <!DOCTYPE\strokec5  html\strokec4 >\strokec6 \
\pard\pardeftab720\partightenfactor0
\cf2 \strokec7 <\strokec4 html\strokec6  \strokec5 lang\strokec7 =\strokec8 "zh-Hant"\strokec7 >\strokec6 \
\strokec7 <\strokec4 head\strokec7 >\strokec6 \
    \strokec7 <\strokec4 meta\strokec6  \strokec5 charset\strokec7 =\strokec8 "UTF-8"\strokec7 >\strokec6 \
    \strokec7 <\strokec4 meta\strokec6  \strokec5 name\strokec7 =\strokec8 "viewport"\strokec6  \strokec5 content\strokec7 =\strokec8 "width=device-width, initial-scale=1.0"\strokec7 >\strokec6 \
    \strokec7 <\strokec4 title\strokec7 >\strokec6 \uc0\u21702 \u21862 A\u22818 \u31070 \u22855 \u36947 \u20855 \u28023 \u22577 \u29986 \u29983 \u22120 \strokec7 </\strokec4 title\strokec7 >\strokec6 \
    \strokec9 <!-- \uc0\u24341 \u20837  Tailwind CSS -->\strokec6 \
    \strokec7 <\strokec4 script\strokec6  \strokec5 src\strokec7 =\strokec8 "https://cdn.tailwindcss.com"\strokec7 ></\strokec4 script\strokec7 >\strokec6 \
    \strokec9 <!-- \uc0\u24341 \u20837  React \u21644  Babel for JSX -->\strokec6 \
    \strokec7 <\strokec4 script\strokec6  \strokec5 src\strokec7 =\strokec8 "https://unpkg.com/react@18/umd/react.development.js"\strokec7 ></\strokec4 script\strokec7 >\strokec6 \
    \strokec7 <\strokec4 script\strokec6  \strokec5 src\strokec7 =\strokec8 "https://unpkg.com/react-dom@18/umd/react-dom.development.js"\strokec7 ></\strokec4 script\strokec7 >\strokec6 \
    \strokec7 <\strokec4 script\strokec6  \strokec5 src\strokec7 =\strokec8 "https://unpkg.com/@babel/standalone/babel.min.js"\strokec7 ></\strokec4 script\strokec7 >\strokec6 \
    \strokec7 <\strokec4 style\strokec7 >\strokec6 \
        \strokec9 /* \uc0\u33258 \u35330 \u23383 \u39636 \u33287 \u21205 \u30059  */\strokec6 \
        \strokec10 @import\strokec6  \strokec8 url\strokec11 (\strokec12 'https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&display=swap'\strokec11 );\strokec6 \
        \strokec4 body\strokec6  \strokec11 \{\strokec6 \
            \strokec5 font-family:\strokec6  \strokec12 'Noto Sans TC'\strokec11 ,\strokec6  \strokec8 sans-serif\strokec11 ;\strokec6 \
        \strokec11 \}\strokec6 \
        \strokec9 /* \uc0\u25353 \u37397 \u30340 \u25080 \u20572 \u25928 \u26524  */\strokec6 \
        \strokec4 .btn-hover-effect:hover\strokec6  \strokec11 \{\strokec6 \
            \strokec5 box-shadow:\strokec6  \strokec13 0\strokec6  \strokec13 0\strokec6  \strokec13 20px\strokec6  #fde047\strokec11 ,\strokec6  \strokec13 0\strokec6  \strokec13 0\strokec6  \strokec13 30px\strokec6  #ef4444\strokec11 ;\strokec6 \
        \strokec11 \}\strokec6 \
    \strokec7 </\strokec4 style\strokec7 >\strokec6 \
\strokec7 </\strokec4 head\strokec7 >\strokec6 \
\strokec7 <\strokec4 body\strokec6  \strokec5 class\strokec7 =\strokec8 "bg-blue-50"\strokec7 >\strokec6 \
\
    \strokec7 <\strokec4 div\strokec6  \strokec5 id\strokec7 =\strokec8 "root"\strokec7 ></\strokec4 div\strokec7 >\strokec6 \
\
    \strokec7 <\strokec4 script\strokec6  \strokec5 type\strokec7 =\strokec8 "text/babel"\strokec7 >\strokec6 \
        // \uc0\u20027 \u25033 \u29992 \u31243 \u24335 \u32068 \u20214 \
        function App() \{\
            const [prompt, setPrompt] = React.useState('');\
            const [loading, setLoading] = React.useState(false);\
            const [imageUrl, setImageUrl] = React.useState('');\
            const [optimizedPrompt, setOptimizedPrompt] = React.useState('');\
            const [error, setError] = React.useState('');\
\
            // \uc0\u34389 \u29702 \u22294 \u29255 \u29983 \u25104 \u36942 \u31243 \u30340 \u20989 \u25976 \
            const handleGenerate = async () => \{\
                if (!prompt) \{\
                    setError('\uc0\u35531 \u20808 \u36664 \u20837 \u20320 \u30340 \u22818 \u24819 \u36947 \u20855 \u21644 \u22580 \u26223 \u65281 ');\
                    return;\
                \}\
                setError('');\
                setLoading(true);\
                setImageUrl('');\
                setOptimizedPrompt('');\
\
                try \{\
                    // \uc0\u27493 \u39519 \u19968 \u65306 \u23559 \u20351 \u29992 \u32773 \u25552 \u31034 \u20778 \u21270 \u28858 \u35443 \u32048 \u30340 \u33521 \u25991 \u25552 \u31034 \u35422 \u65292 \u20197 \u31526 \u21512 \u12300 \u21702 \u21862 A\u22818 \u12301 \u30340 \u39080 \u26684 \
                    const optimizationPrompt = `\
                        Please translate and expand the following user request into a detailed, high-quality English prompt for an image generation model.\
                        The goal is to create a movie poster that perfectly captures the fun, simple, and iconic style of a "Doraemon" (Fujiko F. Fujio) anime.\
                        The prompt must be very descriptive, including details about:\
                        1.  **Characters & Emotion:** Describe the characters like "Doraemon, the blue robotic cat," "Nobita Nobi, the clumsy but kind boy in a yellow shirt," "Shizuka Minamoto, the sweet girl in a pink dress," "Takeshi 'Gian' Goda, the big bully," or "Suneo Honekawa, the fox-faced rich kid." Detail their classic, simple expressions: joy, panic, surprise, or mischief.\
                        2.  **Gadget (\uc0\u36947 \u20855 ):** The prompt must feature a central futuristic gadget from Doraemon's pocket. It should be described clearly (e.g., "the Anywhere Door, a pink wooden door," "the Bamboo Copter, a small propeller worn on the head," "the Time Machine").\
                        3.  **Background & Atmosphere:** The setting is often simple and iconic. Describe locations like "Nobita's messy bedroom," "the neighborhood's vacant lot with three giant concrete pipes," or a fantastical location visited with a gadget. The atmosphere should feel light-hearted, comedic, and full of adventure.\
                        4.  **Art Style:** This is crucial. Specify "classic Doraemon anime style," "Fujiko F. Fujio's art style," "simple, clean, bold outlines," "flat and bright color palette (Doraemon blue, Nobita yellow, Shizuka pink, bright reds)," "rounded character designs," and "a fun, optimistic, and slightly goofy feeling." The art must NOT be painterly, realistic, or overly detailed. It should look like a frame from the 1979 or 2005 anime series.\
                        5.  **Composition:** A clear, dynamic composition, like a manga panel. It should focus on the characters reacting to the gadget's effect.\
\
                        User Request: "$\{prompt\}"\
\
                        Return ONLY the final, optimized English prompt, ready for the image model. Do not include any other text or explanation.\
                    `;\
\
                    let chatHistory = [\{ role: "user", parts: [\{ text: optimizationPrompt \}] \}];\
                    const payloadForOptimization = \{ contents: chatHistory \};\
                    const apiKey = ""; \
                    const apiUrlForOptimization = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$\{apiKey\}`;\
\
                    const optimizationResponse = await fetch(apiUrlForOptimization, \{\
                        method: 'POST',\
                        headers: \{ 'Content-Type': 'application/json' \},\
                        body: JSON.stringify(payloadForOptimization)\
                    \});\
\
                    if (!optimizationResponse.ok) \{\
                        const errorBody = await optimizationResponse.text();\
                        console.error("Optimization API Error:", errorBody);\
                        throw new Error(`\uc0\u20778 \u21270 \u25552 \u31034 \u35422 \u26178 \u30332 \u29983 \u37679 \u35492 \u12290 API \u22238 \u25033 : $\{errorBody\}`);\
                    \}\
\
                    const optimizationResult = await optimizationResponse.json();\
                    const generatedOptimizedPrompt = optimizationResult.candidates[0]?.content?.parts[0]?.text.trim();\
                    \
                    if (!generatedOptimizedPrompt) \{\
                       throw new Error('\uc0\u28961 \u27861 \u24478  AI \u29554 \u21462 \u20778 \u21270 \u24460 \u30340 \u25552 \u31034 \u35422 \u12290 ');\
                    \}\
                    setOptimizedPrompt(generatedOptimizedPrompt);\
\
                    // \uc0\u27493 \u39519 \u20108 \u65306 \u20351 \u29992 \u20778 \u21270 \u24460 \u30340 \u25552 \u31034 \u35422 \u29983 \u25104 \u22294 \u29255 \
                    const payloadForImage = \{\
                        instances: [\{ prompt: generatedOptimizedPrompt \}],\
                        parameters: \{ sampleCount: 1, aspectRatio: "4:3" \} // Changed to a more classic anime/TV aspect ratio\
                    \};\
                    const apiUrlForImage = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=$\{apiKey\}`;\
\
                    const imageResponse = await fetch(apiUrlForImage, \{\
                        method: 'POST',\
                        headers: \{ 'Content-Type': 'application/json' \},\
                        body: JSON.stringify(payloadForImage)\
                    \});\
\
                    if (!imageResponse.ok) \{\
                        const errorBody = await imageResponse.text();\
                        console.error("Image Generation API Error:", errorBody);\
                        throw new Error(`\uc0\u29983 \u25104 \u28023 \u22577 \u26178 \u30332 \u29983 \u37679 \u35492 \u12290 API \u22238 \u25033 : $\{errorBody\}`);\
                    \}\
\
                    const imageResult = await imageResponse.json();\
                    const b64Json = imageResult.predictions?.[0]?.bytesBase64Encoded;\
\
                    if (b64Json) \{\
                        const generatedImageUrl = `data:image/png;base64,$\{b64Json\}`;\
                        setImageUrl(generatedImageUrl);\
                    \} else \{\
                        throw new Error('\uc0\u28023 \u22577 \u29983 \u25104 \u22833 \u25943 \u65292 \u26410 \u25910 \u21040 \u26377 \u25928 \u30340 \u22294 \u29255 \u36039 \u26009 \u12290 ');\
                    \}\
\
                \} catch (err) \{\
                    setError(err.message || '\uc0\u30332 \u29983 \u26410 \u30693 \u37679 \u35492 \u65292 \u35531 \u31245 \u24460 \u20877 \u35430 \u12290 ');\
                    console.error(err);\
                \} finally \{\
                    setLoading(false);\
                \}\
            \};\
\
            return (\
                <div className="bg-blue-50 text-slate-800 min-h-screen flex flex-col items-center p-4">\
                    <div className="w-full max-w-2xl mx-auto">\
                        <header className="text-center my-8">\
                            <h1 className="text-4xl md:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-red-500">\
                                \uc0\u21702 \u21862 A\u22818 \u31070 \u22855 \u36947 \u20855 \u29986 \u29983 \u22120 \
                            </h1>\
                            <p className="text-slate-500 mt-4">\
                                \uc0\u36664 \u20837 \u20320 \u24819 \u35201 \u30340 \u36947 \u20855 \u21644 \u22580 \u26223 \u65292 \u35731 \u21702 \u21862 A\u22818 \u24171 \u20320 \u23526 \u29694 \u39000 \u26395 \u65281 \
                            </p>\
                        </header>\
\
                        <main className="flex flex-col items-center gap-6 w-full px-4">\
                            <div className="w-full">\
                                <textarea\
                                    value=\{prompt\}\
                                    onChange=\{(e) => setPrompt(e.target.value)\}\
                                    placeholder="\uc0\u20363 \u22914 \u65306 \u22823 \u38596 \u36319 \u21702 \u21862 A\u22818 \u29992 \u20219 \u24847 \u38272 \u21040 \u30333 \u22538 \u32000 \u21644 \u24656 \u40845 \u37326 \u39184 "\
                                    className="w-full h-28 p-4 bg-white border-2 border-slate-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors"\
                                />\
                            </div>\
\
                            <button\
                                onClick=\{handleGenerate\}\
                                disabled=\{loading\}\
                                className="w-full md:w-auto px-8 py-4 bg-blue-500 text-white font-bold rounded-full shadow-lg hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:scale-100 transition-all duration-300 relative border-4 border-white btn-hover-effect"\
                            >\
                                <div className="absolute -top-3 -left-3 w-10 h-10 bg-red-500 rounded-full border-4 border-white"></div>\
                                <div className="absolute -bottom-4 w-12 h-12 bg-yellow-300 rounded-full border-4 border-white flex items-center justify-center">\
                                    <div className="w-3 h-3 bg-gray-600 rounded-full"></div>\
                                </div>\
                                \{loading ? '\uc0\u36947 \u20855 \u27491 \u22312 \u25343 \u20986 ...' : '\u25343 \u20986 \u36947 \u20855 \u21543 \u65281 '\}\
                            </button>\
\
                            \{error && <p className="text-red-500 mt-4 text-center font-semibold">\{error\}</p>\}\
\
                            <div className="w-full mt-8 flex flex-col items-center gap-8">\
                                \{loading && (\
                                    <div className="flex flex-col items-center justify-center gap-4">\
                                        <div className="relative">\
                                            <img src="https://placehold.co/80x80/3b82f6/ffffff?text=D" className="rounded-full animate-bounce" alt="Loading Icon"/>\
                                            <div className="absolute bottom-2 left-1/2 -translate-x-1/2 w-8 h-4 bg-yellow-400 rounded-t-full"></div>\
                                        </div>\
                                        <p className="text-slate-500">\uc0\u21702 \u21862 A\u22818 \u27491 \u22312 \u30334 \u23542 \u34955 \u35041 \u23563 \u25214 \u36947 \u20855 ...</p>\
                                    </div>\
                                )\}\
                                \
                                \{imageUrl && !loading && (\
                                    <div className="w-full max-w-md bg-white rounded-lg shadow-2xl p-4 border-2 border-blue-200">\
                                        <img\
                                            src=\{imageUrl\}\
                                            alt="Generated Doraemon-Inspired Anime Poster"\
                                            className="w-full rounded-md object-contain border-4 border-yellow-300"\
                                        />\
                                        <div className="mt-4">\
                                            <h3 className="text-lg font-bold text-blue-600">\uc0\u20778 \u21270 \u24460 \u30340 \u33521 \u25991 \u25552 \u31034 \u35422 \u65306 </h3>\
                                            <p className="text-slate-600 bg-blue-100 p-3 rounded-md mt-2 text-sm break-words">\
                                                \{optimizedPrompt\}\
                                            </p>\
                                        </div>\
                                    </div>\
                                )\}\
                            </div>\
                        </main>\
                    </div>\
                </div>\
            );\
        \}\
\
        // \uc0\u23559  App \u32068 \u20214 \u28210 \u26579 \u21040  #root \u20803 \u32032 \u20013 \
        const container = document.getElementById('root');\
        const root = ReactDOM.createRoot(container);\
        root.render(<App />);\
    \strokec7 </\strokec4 script\strokec7 >\strokec6 \
\
\strokec7 </\strokec4 body\strokec7 >\strokec6 \
\strokec7 </\strokec4 html\strokec7 >\strokec6 \
\
}