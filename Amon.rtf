<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>哆啦A夢神奇道具海報產生器</title>
    <!-- 引入 Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- 引入 React 和 Babel for JSX -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        /* 自訂字體與動畫 */
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&display=swap');
        body {
            font-family: 'Noto Sans TC', sans-serif;
        }
        /* 按鈕的懸停效果 */
        .btn-hover-effect:hover {
            box-shadow: 0 0 20px #fde047, 0 0 30px #ef4444;
        }
    </style>
</head>
<body class="bg-blue-50">

    <div id="root"></div>

    <script type="text/babel">
        // 主應用程式組件
        function App() {
            const [prompt, setPrompt] = React.useState('');
            const [loading, setLoading] = React.useState(false);
            const [imageUrl, setImageUrl] = React.useState('');
            const [optimizedPrompt, setOptimizedPrompt] = React.useState('');
            const [error, setError] = React.useState('');

            // 處理圖片生成過程的函數
            const handleGenerate = async () => {
                if (!prompt) {
                    setError('請先輸入你的夢想道具和場景！');
                    return;
                }
                setError('');
                setLoading(true);
                setImageUrl('');
                setOptimizedPrompt('');

                try {
                    // 步驟一：將使用者提示優化為詳細的英文提示詞，以符合「哆啦A夢」的風格
                    const optimizationPrompt = `
                        Please translate and expand the following user request into a detailed, high-quality English prompt for an image generation model.
                        The goal is to create a movie poster that perfectly captures the fun, simple, and iconic style of a "Doraemon" (Fujiko F. Fujio) anime.
                        The prompt must be very descriptive, including details about:
                        1.  **Characters & Emotion:** Describe the characters like "Doraemon, the blue robotic cat," "Nobita Nobi, the clumsy but kind boy in a yellow shirt," "Shizuka Minamoto, the sweet girl in a pink dress," "Takeshi 'Gian' Goda, the big bully," or "Suneo Honekawa, the fox-faced rich kid." Detail their classic, simple expressions: joy, panic, surprise, or mischief.
                        2.  **Gadget (道具):** The prompt must feature a central futuristic gadget from Doraemon's pocket. It should be described clearly (e.g., "the Anywhere Door, a pink wooden door," "the Bamboo Copter, a small propeller worn on the head," "the Time Machine").
                        3.  **Background & Atmosphere:** The setting is often simple and iconic. Describe locations like "Nobita's messy bedroom," "the neighborhood's vacant lot with three giant concrete pipes," or a fantastical location visited with a gadget. The atmosphere should feel light-hearted, comedic, and full of adventure.
                        4.  **Art Style:** This is crucial. Specify "classic Doraemon anime style," "Fujiko F. Fujio's art style," "simple, clean, bold outlines," "flat and bright color palette (Doraemon blue, Nobita yellow, Shizuka pink, bright reds)," "rounded character designs," and "a fun, optimistic, and slightly goofy feeling." The art must NOT be painterly, realistic, or overly detailed. It should look like a frame from the 1979 or 2005 anime series.
                        5.  **Composition:** A clear, dynamic composition, like a manga panel. It should focus on the characters reacting to the gadget's effect.

                        User Request: "${prompt}"

                        Return ONLY the final, optimized English prompt, ready for the image model. Do not include any other text or explanation.
                    `;

                    let chatHistory = [{ role: "user", parts: [{ text: optimizationPrompt }] }];
                    const payloadForOptimization = { contents: chatHistory };
                    const apiKey = ""; 
                    const apiUrlForOptimization = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    const optimizationResponse = await fetch(apiUrlForOptimization, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payloadForOptimization)
                    });

                    if (!optimizationResponse.ok) {
                        const errorBody = await optimizationResponse.text();
                        console.error("Optimization API Error:", errorBody);
                        throw new Error(`優化提示詞時發生錯誤。API 回應: ${errorBody}`);
                    }

                    const optimizationResult = await optimizationResponse.json();
                    const generatedOptimizedPrompt = optimizationResult.candidates[0]?.content?.parts[0]?.text.trim();
                    
                    if (!generatedOptimizedPrompt) {
                       throw new Error('無法從 AI 獲取優化後的提示詞。');
                    }
                    setOptimizedPrompt(generatedOptimizedPrompt);

                    // 步驟二：使用優化後的提示詞生成圖片
                    const payloadForImage = {
                        instances: [{ prompt: generatedOptimizedPrompt }],
                        parameters: { sampleCount: 1, aspectRatio: "4:3" } // Changed to a more classic anime/TV aspect ratio
                    };
                    const apiUrlForImage = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${apiKey}`;

                    const imageResponse = await fetch(apiUrlForImage, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payloadForImage)
                    });

                    if (!imageResponse.ok) {
                        const errorBody = await imageResponse.text();
                        console.error("Image Generation API Error:", errorBody);
                        throw new Error(`生成海報時發生錯誤。API 回應: ${errorBody}`);
                    }

                    const imageResult = await imageResponse.json();
                    const b64Json = imageResult.predictions?.[0]?.bytesBase64Encoded;

                    if (b64Json) {
                        const generatedImageUrl = `data:image/png;base64,${b64Json}`;
                        setImageUrl(generatedImageUrl);
                    } else {
                        throw new Error('海報生成失敗，未收到有效的圖片資料。');
                    }

                } catch (err) {
                    setError(err.message || '發生未知錯誤，請稍後再試。');
                    console.error(err);
                } finally {
                    setLoading(false);
                }
            };

            return (
                <div className="bg-blue-50 text-slate-800 min-h-screen flex flex-col items-center p-4">
                    <div className="w-full max-w-2xl mx-auto">
                        <header className="text-center my-8">
                            <h1 className="text-4xl md:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-red-500">
                                哆啦A夢神奇道具產生器
                            </h1>
                            <p className="text-slate-500 mt-4">
                                輸入你想要的道具和場景，讓哆啦A夢幫你實現願望！
                            </p>
                        </header>

                        <main className="flex flex-col items-center gap-6 w-full px-4">
                            <div className="w-full">
                                <textarea
                                    value={prompt}
                                    onChange={(e) => setPrompt(e.target.value)}
                                    placeholder="例如：大雄跟哆啦A夢用任意門到白堊紀和恐龍野餐"
                                    className="w-full h-28 p-4 bg-white border-2 border-slate-200 rounded-lg focus:outline-none focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors"
                                />
                            </div>

                            <button
                                onClick={handleGenerate}
                                disabled={loading}
                                className="w-full md:w-auto px-8 py-4 bg-blue-500 text-white font-bold rounded-full shadow-lg hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:scale-100 transition-all duration-300 relative border-4 border-white btn-hover-effect"
                            >
                                <div className="absolute -top-3 -left-3 w-10 h-10 bg-red-500 rounded-full border-4 border-white"></div>
                                <div className="absolute -bottom-4 w-12 h-12 bg-yellow-300 rounded-full border-4 border-white flex items-center justify-center">
                                    <div className="w-3 h-3 bg-gray-600 rounded-full"></div>
                                </div>
                                {loading ? '道具正在拿出...' : '拿出道具吧！'}
                            </button>

                            {error && <p className="text-red-500 mt-4 text-center font-semibold">{error}</p>}

                            <div className="w-full mt-8 flex flex-col items-center gap-8">
                                {loading && (
                                    <div className="flex flex-col items-center justify-center gap-4">
                                        <div className="relative">
                                            <img src="https://placehold.co/80x80/3b82f6/ffffff?text=D" className="rounded-full animate-bounce" alt="Loading Icon"/>
                                            <div className="absolute bottom-2 left-1/2 -translate-x-1/2 w-8 h-4 bg-yellow-400 rounded-t-full"></div>
                                        </div>
                                        <p className="text-slate-500">哆啦A夢正在百寶袋裡尋找道具...</p>
                                    </div>
                                )}
                                
                                {imageUrl && !loading && (
                                    <div className="w-full max-w-md bg-white rounded-lg shadow-2xl p-4 border-2 border-blue-200">
                                        <img
                                            src={imageUrl}
                                            alt="Generated Doraemon-Inspired Anime Poster"
                                            className="w-full rounded-md object-contain border-4 border-yellow-300"
                                        />
                                        <div className="mt-4">
                                            <h3 className="text-lg font-bold text-blue-600">優化後的英文提示詞：</h3>
                                            <p className="text-slate-600 bg-blue-100 p-3 rounded-md mt-2 text-sm break-words">
                                                {optimizedPrompt}
                                            </p>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </main>
                    </div>
                </div>
            );
        }

        // 將 App 組件渲染到 #root 元素中
        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<App />);
    </script>

</body>
</html>
